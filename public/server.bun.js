//__HEAD__
var U=Object.create,$=Object.defineProperty,G=Object.getPrototypeOf,K=Object.prototype.hasOwnProperty,Q=Object.getOwnPropertyNames,V=Object.getOwnPropertyDescriptor;var P=e=>$(e,"__esModule",{value:!0});var F=(e,t)=>{for(var r in t)$(e,r,{get:t[r],enumerable:!0})},W=(e,t,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of Q(t))!K.call(e,a)&&a!=="default"&&$(e,a,{get:()=>t[a],enumerable:!(r=V(t,a))||r.enumerable});return e},y=e=>W(P($(e!=null?U(G(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);P(exports);F(exports,{default:()=>L});var g={};F(g,{default:()=>Z});function x(e){let t;return e&&((t=e.toIterable)?t.call(e):e)}var rt=Symbol.for("#__initor__"),it=Symbol.for("#__inited__"),st=Symbol.for("#__hooks__"),nt=Symbol.for("#type"),at=Symbol.for("#__listeners__");function O(e,t=null){let r={},a=/\$\$\d+\$\$/,l=function(n){return r[n]||(r[n]=t?t(n):{})},_=function(n,s){if(typeof s=="string"){if(s[0]=="$"&&a.test(s))return l(s)}else if(typeof n=="string"&&n[0]=="$"&&a.test(n)){let o=l(n);return Object.assign(o,s),o}return s};return JSON.parse(e,_)}function j(e,t){var r,a,l,_;let h={},n={added:[],changed:[],removed:[],all:[],urls:{}};if(e.assets)for(let s=0,o=x(e.assets),c=o.length;s<c;s++){let i=o[s],u=i.originalPath||i.path;h[u]=i,i.url&&((r=t.urls)[a=i.url]||(r[a]=i))}for(let s=0,o=x(t.assets||[]),c=o.length;s<c;s++){let i=o[s],u=i.originalPath||i.path,m=h[u];i.url&&e.urls&&(e.urls[i.url]=i),m?(m.hash!=i.hash&&(m.invalidated=Date.now(),m.replacedBy=i,i.replaces=m,n.changed.push(i),n.all.push(i),m==e.main&&(n.main=i)),l=h[u],delete h[u]):(n.added.push(i),n.all.push(i))}for(let s=0,o=Object.keys(h),c=o.length,i,u;s<c;s++)i=o[s],u=h[i],u.removed=Date.now(),n.all.push(u);for(let s=0,o=x(n.all),c=o.length;s<c;s++){let i=o[s];(n[_=i.type]||(n[_]=[])).push(i)}return n.removed=Object.values(h),t.changes=n,t}var D=y(require("events")),p=y(require("fs")),f=y(require("path"));var M=Symbol.for("#__initor__"),v=Symbol.for("#__inited__"),T=Symbol.for("#__hooks__"),X=Symbol.for("#refresh"),z=Symbol.for("#__init__"),S=Symbol.for("#manifest"),R=Symbol.for("#absPath"),w=Symbol.for("#raw"),k=Symbol.for("#watch"),A=Symbol(),N=class{constructor(t){this[S]=t}get absPath(){return this[R]||(this[R]=this[S].resolve(this))}get name(){return f.default.basename(this.path)}get body(){return this.readSync()}readSync(){return p.default.readFileSync(this.absPath,"utf-8")}pipe(t){return p.default.createReadStream(this.absPath).pipe(t)}toString(){return this.url||this.absPath}},B=class extends D.EventEmitter{static[z](){return this.prototype[M]=A,this}constructor(t={}){var r;super();r=this,this.options=t,this.data={},this.path=t.path,this.refs={},r.reviver=function(a){return new N(r)},r.init(t.data),this[M]===A&&(this[T]&&this[T].inited(this),this[v]&&this[v]())}get srcdir(){return f.default.resolve(f.default.dirname(this.path),this.data.srcdir)}get outdir(){return f.default.resolve(f.default.dirname(this.path),this.data.outdir)}get changes(){return this.data.changes||{}}get inputs(){return this.data.inputs}get outputs(){return this.data.outputs}get assets(){return this.data.assets}get urls(){return this.data.urls||{}}get main(){return this.data.main}get cwd(){return process.cwd()}get raw(){return this.data[w]}resolve(t){return t._=="input"?f.default.resolve(this.srcdir||this.cwd,t.path):t._=="output"?f.default.resolve(this.outdir,t.path):f.default.resolve(this.cwd,t.path||t)}resolveAssetPath(t){return f.default.resolve(this.outdir,t)}read(t){return p.default.readFileSync(this.resolve(t),"utf-8")}loadFromFile(t){return p.default.existsSync(t)?p.default.readFileSync(t,"utf-8"):"{}"}init(t=null){return(t||this.path)&&this.update(t),this}update(t){if(t==null&&(this.path?t=this.loadFromFile(this.path):console.warn("cannot update manifest without path")),typeof t=="string"){let r=t;t=O(t,this.reviver),t[w]=r}return this.data=j(this.data||{},t),this.data.changes.all.length&&this.emit("change",this.diff,this),this.data.changes.main&&this.emit("change:main",this.data.main,this),this.data.changes}serializeForBrowser(){return this.data[w]}[X](t){return!0}watch(){var t=this;if(this[k]!=!0?(this[k]=!0,!0):!1)return t.path&&!process.env.IMBA_HMR&&p.default.watch(this.path,function(r,a){let l=p.default.existsSync(t.path),_=l&&p.default.statSync(t.path);l&&t.update()})}on(t,r){return this.watch(),super.on(...arguments)}};B[z]();var C=class{static for(t){return new Proxy({},new this(t))}constructor(t){this.getter=t}get target(){return this.getter()}get(t,r){return this.target[r]}set(t,r,a){return this.target[r]=a,!0}},J=C.for(function(){return globalThis[S]});var pt=Symbol.for("#__initor__"),_t=Symbol.for("#__inited__"),ct=Symbol.for("#__hooks__"),E=Symbol.for("#__init__"),Y=Symbol.for("#__patch__"),H=Symbol.for("#warned"),d=Symbol.for("#asset"),b=class{static wrap(t){let r=new b(t);return new Proxy(r,r)}constructor(t){this.meta=t}get input(){return J.inputs[this.meta.input]}get asset(){return globalThis._MF_?this.meta:this.input?this.input.asset:null}set(t,r,a){return!0}get(t,r){return this.meta.meta&&this.meta.meta[r]!=null?this.meta.meta[r]:this.asset?r=="absPath"&&!this.asset.absPath?this.asset.url:this.asset[r]:((this.meta[H]!=!0?(this.meta[H]=!0,!0):!1)&&console.warn("Asset for '"+this.meta.input+"' not found"),r=="valueOf"?function(){return""}:null)}},I=class{[Y](t={}){var r;(r=t.url)!==void 0&&(this.url=r),(r=t.meta)!==void 0&&(this.meta=r)}constructor(t=null){this[E](t)}[E](t=null,r=!0){this.url=t?t.url:void 0,this.meta=t?t.meta:void 0}adoptNode(t){var r;if((r=this.meta)==null?void 0:r.content){for(let a=this.meta.attributes,l=0,_=Object.keys(a),h=_.length,n,s;l<h;l++)n=_[l],s=a[n],t.setAttribute(n,s);t.innerHTML=this.meta.content}return this}toString(){return this.url}toStyleString(){return"url("+this.url+")"}};function q(e){var t,r;if(e[d])return e[d];if(e.type=="svg")return e[d]||(e[d]=new I(e));if(e.input){let a=globalThis._MF_&&globalThis._MF_[e.input];return a&&(Object.assign(e,a),e.toString=function(){return this.absPath}),e[d]||(e[d]=b.wrap(e))}return e}var Z=q({input:"entry:app/index.html"});var L={port:3e3,fetch:function(e,t){return console.log({index:g}),console.log({index:void 0}),new Response(void 0)}};0&&(module.exports={});
//__FOOT__
//# sourceMappingURL=data:application/json;base64,
